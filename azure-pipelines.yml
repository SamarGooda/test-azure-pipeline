# variables:
#   terraformstoragerg: 'terraformrg'
#   terraformstorageaccount: 'terraformstorage0274eed9'
#   storagekey: 'PipelineWillGetThisValueRuntime'

trigger:
- main

pool:
  vmImage: 'ubuntu-latest'

# steps:
# - script: echo Hello, world!
#   displayName: 'Run a one-line script'

stages:
  - stage: Terraform
    displayName: Terraform Create
    jobs:
      - job: Trigger_Terraform
        displayName: Trigger Terraform
        container: terraform-runtime
        steps:
          - bash: terraform init 
            displayName: "Initialize Terraform"
          - bash: terraform plan 
            displayName: "Planning Terraform"
          - bash: terraform apply
            displayName: "Apply terraform"


# - task: terraformInstaller@0
#   inputs:
#     terraformVersion: '0.14.5'
#   displayName:  terraform-tasks

# - task: ms-devlabs.custom-terraform-tasks.custom-terraform-installer-task.TerraformInstaller@0
#   displayName: 'Install Terraform 0.14.5'

#- task: AWSShellScript@1
  #inputs:
    #awsCredentials: 'AWS-SANDBOX'
    #regionName: 'us-east-1'
    #scriptType: 'inline'
    #inlineScript: 'cdk deploy --ci --require-approval never'
    #disableAutoCwd: true
    #workingDirectory: '$(System.DefaultWorkingDirectory)'
    #failOnStandardError: false
 # displayName: 'cdk deploy'

# - task:  terraform@0
#   inputs:
#    command: 'init'
#     #providerAzureConnectedServiceName: 'MTC Denver Sandbox'
#     #backendAzureProviderStorageAccountName: 'mtcdenterraformsandbox'
#     #configrationDirectory: $(System.DefaultWorkingDirectory)/_Terraform-CI/drop/Terraform
#   displayName: 'Terraform Init'

# - task: ms-devlabs.custom-terraform-tasks.custom-terraform-release-task.TerraformTaskV1@0
#   displayName: 'Terraform : init'
#   inputs:
#     provider: aws
#     workingDirectory: '$(System.DefaultWorkingDirectory)/_Terraform-CI/drop/Terraform'
#     backendAzureRmResourceGroupName: '$(terraformstoragerg)'
#     backendAzureRmStorageAccountName: '$(terraformstorageaccount) '
#     backendAzureRmContainerName: terraform
#     backendAzureRmKey: terraform.tfstate
#     backendServiceAWS: 'test-service'
#     backendAWSBucketName: terraform
#     backendAWSKey: terraform.tfstat


# - task: ms-devlabs.custom-terraform-tasks.custom-terraform-release-task.TerraformTaskV1@0
#   displayName: 'Terraform : plan'
#   inputs:
#     provider: aws
#     command: plan
#     workingDirectory: '$(System.DefaultWorkingDirectory)/_Terraform-CI/drop/Terraform'
#     environmentServiceNameAWS: 'test-service'
#     backendAzureRmResourceGroupName: '$(terraformstoragerg)'
#     backendAzureRmStorageAccountName: '$(terraformstorageaccount) '
#     backendAzureRmContainerName: terraform
#     backendAzureRmKey: '$(storagekey)'

# - task:  terraform@0
#   inputs:
#    command: 'plan'
#     #providerAzureConnectedServiceName: 'MTC Denver Sandbox'
#     #backendAzureProviderStorageAccountName: 'mtcdenterraformsandbox'
#    configrationDirectory: $(System.DefaultWorkingDirectory)/_Terraform-CI/drop/Terraform
#   displayName: 'Terraform plan'
# #- task: terraform@0
#   #inputs:
#     #command: 'plan'
#     #providerAzureConnectedServiceName: 'MTC Denver Sandbox'
#     #configrationDirectory: $(System.DefaultWorkingDirectory)/_Terraform-CI/drop/Terraform
#    # args:  -out=tfplan.out
#   #displayName: Terraform Plan




